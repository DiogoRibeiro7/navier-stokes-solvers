name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 0 * * 0'

env:
  BUILD_TYPE: Release

jobs:
  # Build and test on multiple platforms
  build-and-test:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: macos-latest
            compiler: gcc
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc clang libfftw3-dev libopenblas-dev valgrind
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install fftw gcc llvm
    
    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
        fi
    
    - name: Build finite difference solver
      run: make fd
    
    - name: Build spectral solver
      run: make spectral
    
    - name: Run quick validation tests
      run: |
        timeout 30 ./bin/ns_fd_solver || echo "FD solver completed/timed out"
        timeout 30 ./bin/ns_spectral_solver || echo "Spectral solver completed/timed out"
    
    - name: Check for memory leaks (Linux only)
      if: runner.os == 'Linux'
      run: |
        valgrind --leak-check=full --error-exitcode=1 --quiet \
          timeout 10 ./bin/ns_fd_solver || echo "Valgrind check completed"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.compiler }}
        path: bin/
        retention-days: 7

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy clang-format
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem \
          --error-exitcode=1 src/ include/ || true
    
    - name: Check code formatting
      run: |
        find src include -name '*.c' -o -name '*.h' | \
          xargs clang-format --dry-run --Werror || true

  # Documentation
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Check README links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
    
    - name: Validate Markdown
      uses: nosborn/github-action-markdown-cli@v3.5.0
      with:
        files: .
        config_file: .markdownlint.json
        ignore_files: node_modules/

  # Python scripts validation
  python-scripts:
    name: Validate Python Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f scripts/requirements.txt ]; then
          pip install -r scripts/requirements.txt
        fi
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy scripts/ || true

  # Create release on tag
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc libfftw3-dev
    
    - name: Build release binaries
      run: |
        make clean
        make all CFLAGS="-O3 -march=native -DNDEBUG"
    
    - name: Create tarball
      run: |
        tar -czf navier-stokes-solvers-${{ github.ref_name }}.tar.gz \
          bin/ include/ src/ Makefile README.md LICENSE
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: navier-stokes-solvers-${{ github.ref_name }}.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
